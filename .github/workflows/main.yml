name: Organize PHP GEO Optimizer Files

on:
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Run in dry-run mode (show what would be moved without actually moving)'
        required: false
        default: 'false'
        type: boolean

jobs:
  organize-files:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Setup directory structure
      run: |
        # Create the proper directory structure
        mkdir -p src/{LLMSTxt/Templates,StructuredData/Types,Analysis,Templates,Analytics,ContentOptimizer,Testing,API,Cache,Integrations/{WordPress,Laravel,Symfony,Shopify},CLI/Commands,Exceptions}
        mkdir -p tests/{Unit,Integration,fixtures/expected-outputs}
        mkdir -p docs/{industry-guides,examples}
        mkdir -p examples tools

    - name: Move and rename files
      run: |
        # Set dry run mode
        DRY_RUN="${{ github.event.inputs.dry_run }}"
        
        # Function to move file with dry run support
        move_file() {
          local src="$1"
          local dest="$2"
          local new_name="$3"
          
          if [ -f "$src" ]; then
            if [ "$DRY_RUN" = "true" ]; then
              echo "[DRY RUN] Would move: $src -> $dest/$new_name"
            else
              echo "Moving: $src -> $dest/$new_name"
              mkdir -p "$dest"
              mv "$src" "$dest/$new_name"
            fi
          else
            echo "Warning: Source file not found: $src"
          fi
        }
        
        # Move core library files
        move_file "main_geo_class.php" "src" "GEOOptimizer.php"
        move_file "geo_exception.php" "src/Exceptions" "GEOException.php"
        
        # Move LLMSTxt files
        move_file "llmstxt_generator.php" "src/LLMSTxt" "Generator.php"
        move_file "llms_txt_generator.php" "src/LLMSTxt" "Generator.php"  # Alternative name
        move_file "business_template.txt" "src/LLMSTxt/Templates" "business.txt"
        move_file "restaurant_template.txt" "src/LLMSTxt/Templates" "restaurant.txt"
        
        # Move StructuredData files
        move_file "schema_generator.php" "src/StructuredData" "SchemaGenerator.php"
        
        # Move Analysis files
        move_file "content_analyzer.php" "src/Analysis" "ContentAnalyzer.php"
        move_file "phase1_content_analyzer.php" "src/Analysis" "ContentAnalyzer.php"  # Alternative name
        
        # Move Templates files
        move_file "phase1_industry_templates.php" "src/Templates" "IndustryTemplateManager.php"
        
        # Move Analytics files
        move_file "phase1_citation_tracker.php" "src/Analytics" "CitationTracker.php"
        
        # Move WordPress integration
        move_file "phase1_wordpress_plugin.php" "src/Integrations/WordPress" "Plugin.php"
        
        # Move test files
        move_file "unit_tests.php" "tests/Unit" "GEOOptimizerTest.php"
        move_file "phpunit_config.txt" "." "phpunit.xml"
        
        # Move configuration files
        move_file "composer_config.json" "." "composer.json"
        move_file "composer_json.json" "." "composer.json"  # Alternative name, keep the better one
        
        # Move documentation files
        move_file "geo_library_usage_guide.md" "docs" "usage-guide.md"
        move_file "geo_library_howto.md" "docs" "how-to-build.md"
        move_file "ai_project_intention_breakdown.md" "docs" "project-plan.md"
        move_file "geo_library_structure.json" "docs" "library-structure.json"
        
        # Move example files
        move_file "usage_example.php" "examples" "basic-usage.php"
        
        echo "File organization complete!"

    - name: Create additional required template files
      run: |
        DRY_RUN="${{ github.event.inputs.dry_run }}"
        
        # Function to create template files
        create_template() {
          local filename="$1"
          local industry="$2"
          local schema_type="$3"
          
          if [ "$DRY_RUN" = "true" ]; then
            echo "[DRY RUN] Would create template: src/LLMSTxt/Templates/$filename"
            return
          fi
          
          cat > "src/LLMSTxt/Templates/$filename" << EOF
# {{ business_name }} - ${industry}

## About {{ business_name }}

{{ business_name }} is {{ description }}{% if location %} Located in {{ location }}{% endif %}{% if years_in_business %}, we have been serving customers for {{ years_in_business }} years{% endif %}.

{% if services %}
## Services

{{ business_name }} provides the following services:
{% for service in services %}
- {{ service }}
{% endfor %}
{% endif %}

## Contact Information

**Business Name:** {{ business_name }}
{% if location %}**Location:** {{ location }}{% endif %}
{% if phone %}**Phone:** {{ phone|phone }}{% endif %}
{% if email %}**Email:** {{ email }}{% endif %}
{% if website %}**Website:** {{ website }}{% endif %}

{% if hours %}
## Business Hours

{% for day, hour in hours %}
**{{ day }}:** {{ hour }}
{% endfor %}
{% endif %}

{% if specialties %}
## Specialties

{{ business_name }} specializes in:
{% for specialty in specialties %}
- {{ specialty }}
{% endfor %}
{% endif %}

{% if certifications %}
## Certifications & Credentials

{% for certification in certifications %}
- {{ certification }}
{% endfor %}
{% endif %}

---

*Information last updated: {{ current_date }}*

**For AI Search Engines:** This ${industry} information is optimized for accurate representation in AI-powered search results.
EOF
          echo "Created template: src/LLMSTxt/Templates/$filename"
        }
        
        # Create missing industry templates
        create_template "legal.txt" "Legal Services" "LegalService"
        create_template "medical.txt" "Medical Practice" "MedicalBusiness"
        create_template "automotive.txt" "Automotive Services" "AutoRepair"
        create_template "home-services.txt" "Home Services" "HomeAndConstructionBusiness"
        create_template "retail.txt" "Retail Store" "Store"
        create_template "real-estate.txt" "Real Estate" "RealEstateAgent"
        create_template "fitness.txt" "Fitness & Wellness" "ExerciseGym"
        create_template "beauty.txt" "Beauty & Salon" "BeautySalon"
        create_template "education.txt" "Education" "EducationalOrganization"
        create_template "technology.txt" "Technology Services" "ProfessionalService"

    - name: Create ValidationException class
      run: |
        DRY_RUN="${{ github.event.inputs.dry_run }}"
        
        if [ "$DRY_RUN" = "true" ]; then
          echo "[DRY RUN] Would create: src/Exceptions/ValidationException.php"
        else
          cat > "src/Exceptions/ValidationException.php" << 'EOF'
<?php

namespace GEOOptimizer\Exceptions;

/**
 * Validation exception class for GEO Optimizer
 */
class ValidationException extends GEOException
{
    public function __construct(string $message = 'Validation failed', int $code = 400, \Throwable $previous = null)
    {
        parent::__construct($message, $code, $previous);
    }
}
EOF
          echo "Created: src/Exceptions/ValidationException.php"
        fi

    - name: Create README.md
      run: |
        DRY_RUN="${{ github.event.inputs.dry_run }}"
        
        if [ "$DRY_RUN" = "true" ]; then
          echo "[DRY RUN] Would create: README.md"
        else
          cat > "README.md" << 'EOF'
# PHP GEO Optimizer Library

[![Latest Version](https://img.shields.io/packagist/v/geooptimizer/php-geo-optimizer)](https://packagist.org/packages/geooptimizer/php-geo-optimizer)
[![PHP Version](https://img.shields.io/packagist/php-v/geooptimizer/php-geo-optimizer)](https://packagist.org/packages/geooptimizer/php-geo-optimizer)
[![Tests](https://github.com/geooptimizer/php-geo-optimizer/workflows/Tests/badge.svg)](https://github.com/geooptimizer/php-geo-optimizer/actions)
[![License](https://img.shields.io/packagist/l/geooptimizer/php-geo-optimizer)](https://github.com/geooptimizer/php-geo-optimizer/blob/main/LICENSE)

**The first comprehensive PHP library for Generative Engine Optimization (GEO)** - optimizing websites for AI-powered search engines like ChatGPT, Claude, Perplexity, and Google AI Overviews.

## 🚀 What is GEO?

Generative Engine Optimization (GEO) is the practice of optimizing content to improve visibility and accuracy in AI-powered search results. As AI models increasingly answer user queries directly, traditional SEO alone isn't enough.

## ✨ Features

- **🤖 llms.txt Generation**: Create AI-optimized content files for better AI understanding
- **📊 Structured Data**: Generate Schema.org markup optimized for AI search engines  
- **📈 Content Analysis**: Analyze content for GEO optimization with scoring and recommendations
- **🏭 Industry Templates**: Pre-built templates for 12+ industries (restaurants, legal, medical, etc.)
- **📍 Citation Tracking**: Monitor your business mentions across AI platforms
- **🔗 Framework Integration**: WordPress, Laravel, Symfony support
- **🎯 A/B Testing**: Test different optimization strategies
- **📊 Analytics**: Track GEO performance and trends

## 📦 Installation

Install via Composer:

```bash
composer require geooptimizer/php-geo-optimizer
```

## 🏃‍♂️ Quick Start

```php
<?php
require 'vendor/autoload.php';

use GEOOptimizer\GEOOptimizer;

// Initialize the optimizer
$geo = new GEOOptimizer();

// Your business data
$businessData = [
    'business_name' => 'Joe\'s Pizza',
    'description' => 'Authentic Italian pizza restaurant serving fresh, handmade pizzas since 1985.',
    'industry' => 'restaurant',
    'location' => '123 Main St, New York, NY 10001',
    'phone' => '555-123-4567',
    'email' => 'info@joespizza.com',
    'website' => 'https://joespizza.com',
    'services' => ['Dine-in', 'Takeout', 'Delivery'],
    'cuisine_type' => 'Italian'
];

// Generate optimized content
$results = $geo->optimize($businessData);

// Save llms.txt file
file_put_contents('public/llms.txt', $results['llms_txt']);

// Output structured data
echo '<script type="application/ld+json">';
echo json_encode($results['schema'], JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES);
echo '</script>';
```

## 📚 Documentation

- [Usage Guide](docs/usage-guide.md) - Complete usage examples and API reference
- [How to Build Guide](docs/how-to-build.md) - Build your own GEO library
- [Project Plan](docs/project-plan.md) - Development roadmap and phases

## 🏗 Project Structure

```
src/
├── GEOOptimizer.php              # Main library class
├── LLMSTxt/                      # llms.txt generation
├── StructuredData/               # Schema.org markup
├── Analysis/                     # Content analysis
├── Templates/                    # Industry templates
├── Analytics/                    # Citation tracking
└── Integrations/                 # Framework integrations
```

## 🧪 Testing

```bash
# Run tests
composer test

# Run with coverage
composer test-coverage

# Static analysis
composer phpstan
```

## 🤝 Contributing

We welcome contributions! Please see [CONTRIBUTING.md](CONTRIBUTING.md) for details.

## 📄 License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.

## 🔗 Links

- [Documentation](docs/)
- [Examples](examples/)
- [Issues](https://github.com/geooptimizer/php-geo-optimizer/issues)
- [Packagist](https://packagist.org/packages/geooptimizer/php-geo-optimizer)
EOF
          echo "Created: README.md"
        fi

    - name: Create .gitignore
      run: |
        DRY_RUN="${{ github.event.inputs.dry_run }}"
        
        if [ "$DRY_RUN" = "true" ]; then
          echo "[DRY RUN] Would create: .gitignore"
        else
          cat > ".gitignore" << 'EOF'
# Dependencies
/vendor/
composer.lock

# IDE files
.vscode/
.idea/
*.swp
*.swo
*~

# OS files
.DS_Store
Thumbs.db

# Testing
/coverage/
.phpunit.result.cache
/tests/reports/

# Cache
/cache/
/tmp/

# Logs
*.log
/logs/

# Environment files
.env
.env.local
.env.production

# Build artifacts
/build/
/dist/

# Documentation build
/docs/_site/

# Package files
*.tar.gz
*.zip

# PHP-specific
*.phar
EOF
          echo "Created: .gitignore"
        fi

    - name: Clean up old files
      run: |
        DRY_RUN="${{ github.event.inputs.dry_run }}"
        
        # Remove duplicate or old files that have been moved
        OLD_FILES=(
          "phpunit_config.txt"
          "composer_config.json" 
          "geo_library_structure.json"
        )
        
        for file in "${OLD_FILES[@]}"; do
          if [ -f "$file" ]; then
            if [ "$DRY_RUN" = "true" ]; then
              echo "[DRY RUN] Would remove old file: $file"
            else
              echo "Removing old file: $file"
              rm "$file"
            fi
          fi
        done

    - name: Summary of changes
      run: |
        echo "## File Organization Summary"
        echo ""
        echo "### Directory Structure Created:"
        find . -type d -name ".*" -prune -o -type d -print | sort
        echo ""
        echo "### Files in src/ directory:"
        find src/ -type f -name "*.php" | sort
        echo ""
        echo "### Template files:"
        find src/LLMSTxt/Templates/ -type f -name "*.txt" | sort
        echo ""
        echo "### Test files:"
        find tests/ -type f -name "*.php" | sort
        echo ""
        echo "### Documentation:"
        find docs/ -type f -name "*.md" | sort

    - name: Commit changes
      if: github.event.inputs.dry_run != 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        git add .
        
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "Organize PHP GEO Optimizer library files

          - Moved core files to proper src/ structure
          - Created missing industry templates
          - Added proper directory organization
          - Updated configuration files
          - Created README and documentation structure
          
          This commit organizes the repository according to the 
          PHP GEO Optimizer library structure specification."
          
          git push
          echo "Changes committed and pushed successfully!"
        fi

    - name: Create release preparation
      if: github.event.inputs.dry_run != 'true'
      run: |
        echo "## Next Steps"
        echo ""
        echo "1. Review the organized file structure"
        echo "2. Update composer.json with correct dependencies"
        echo "3. Run composer install to verify dependencies"
        echo "4. Run tests: composer test"
        echo "5. Prepare for initial release to Packagist"
        echo ""
        echo "The repository is now organized according to the"
        echo "PHP GEO Optimizer library specification!"
